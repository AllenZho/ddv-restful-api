{"version":3,"sources":["webpack:///webpack/bootstrap 3ae29a075591b18cd27b","webpack:///./lib/api.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe;AACf;AACA;AACA,cAAa;AACb;AACA;AACA,gBAAe;AACf;AACA;AACA;AACA;AACA;AACA,UAAS;AACT,QAAO;AACP;AACA,MAAK;AACL,IAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL,IAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;AACA,EAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA,mCAAkC,2BAA2B;AAC7D;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,YAAW;AACX;AACA;AACA;AACA,UAAS;AACT,QAAO;AACP,MAAK;AACL;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,eAAe;AAC5D;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA","file":"api.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 3ae29a075591b18cd27b","'use strict'\nvar api = module.exports = function ddvRestFulApi (path, req, res) {\n  var _promise = new api.Api(function (resolve, reject) {\n    api.nextTick(function () {\n      var e = null\n      if (typeof path === 'object') {\n        _promise.path(path.path)\n        _promise.sendData(path.data)\n        _promise.headers(path.headers)\n        _promise.method(path.method)\n      } else if (typeof path === 'string') {\n        _promise.path(path || '/')\n      } else {\n        e = new api.ApiError('method type error')\n        reject(e)\n      }\n      // 如果没有错误\n      if (!e) {\n        _promise._resolve = resolve\n        _promise._reject = reject\n        // 设定请求对象\n        if (req && req.req && req.res) {\n          _promise.context(req)\n        } else {\n          _promise.req(req)\n          _promise.res(res)\n        }\n      }\n      // 回收变量\n      e = path = req = res = resolve = reject = void 0\n      api.nextTick.call(_promise, function () {\n        var _promise = this\n        api.request(_promise, function (e, res) {\n          if (_promise) {\n            if (e) {\n              if (typeof _promise._reject === 'function') {\n                _promise._reject(e)\n              } else {\n                console.error('_promise._reject error', e)\n              }\n            } else {\n              if (typeof _promise._resolve === 'function') {\n                _promise._resolve(res)\n              } else {\n                console.error('_promise._resolve error', res)\n              }\n            }\n          }\n          e = res = _promise = void 0\n        })\n      })\n      _promise = void 0\n    })\n  }).then(function (_request) {\n    return new api.Promise(function (resolve, reject) {\n      var r = null\n      var e = null\n      var res = _request.serverRes\n      try {\n        r = JSON.parse(res.body)\n      } catch (e1) {\n        e.body = res.body\n        console.log(e.body)\n        e = e1\n      }\n      if (e) {\n        e.statusCode = res.statusCode\n        e.error_id = res.status\n        e.message = res.status || 'Unknow Error'\n        reject(e)\n      } else if (r) {\n        if (r.state) {\n          r.statusCode = r.statusCode || r.code || res.statusCode\n          r.error_id = r.error_id || res.status\n          r.message = r.message || r.msg || res.status || 'Unknow Error'\n          resolve(r)\n        } else {\n          e = new Error(r.message || r.msg || res.status || 'Unknow Error')\n          e.statusCode = r.statusCode || r.code || res.statusCode\n          e.error_id = r.error_id || res.status\n          e.message = r.message || r.msg || res.status || 'Unknow Error'\n          reject(e)\n        }\n      }\n      _request.destroy()\n      _request = resolve = reject = r = e = res = void 0\n    })\n  })\n  _promise._baseUrl = api.baseUrl\n  _promise._path = '/'\n  _promise._method = 'GET'\n  _promise._headers = Object.create(null)\n  _promise._data = Object.create(null)\n  _promise._query = Object.create(null)\n  return _promise\n}\napi.url = require('./url.js')\napi.Promise = require('./promise.js')\napi.prototype = api.Promise.prototype\nconst request = api.request = require('./request.js')\nconst sign = api.sign = require('./sign.js')\nconst session = api.session = require('./session.js')\n\napi.copyObjByKey = function copyObjByKey (oldObj, newObj, keys) {\n  keys = keys || []\n  keys.forEach(function (key) {\n    oldObj[key] = newObj[key] || oldObj[key]\n  })\n}\n'all race reject resolve'.split(' ').forEach(function (key) {\n  api[key] = function () {\n    return api.Promise[key].apply(api.Promise, arguments)\n  }\n})\n// 设置baseUrl\napi.setBaseUrl = function (url) {\n  request.baseUrl = api.baseUrl = url\n}\n// 设置headersPrefix\napi.setHeadersPrefix = function (prefix) {\n  sign.headersPrefix = request.headersPrefix = api.headersPrefix = prefix\n}\n// 设置是否使用长存储\napi.setLongStorage = function (isUseLong) {\n  session.isLongStorage = Boolean(isUseLong)\n}\n// 设置是否使用长存储\napi.setSessionInitTrySum = function (sum) {\n  session.initTrySum = sum || session.initTrySum\n}\n// 设置初始化session的path\napi.setSessionInitPath = function (path) {\n  session.sessionInitPath = path || session.sessionInitPath\n}\n// GET请求\napi.get = function ddvRestFulApiGet (path, req, res) {\n  return api(path, req, res).method('GET')\n}\n// POST请求\napi.post = function ddvRestFulApiPost (path, req, res) {\n  return api(path, req, res).method('POST')\n}\n// PUT请求\napi.put = function ddvRestFulApiPut (path, req, res) {\n  return api(path, req, res).method('PUT')\n}\n// DELETE请求\napi.del = api['delete'] = function ddvRestFulApiDelete (path, req, res) {\n  return api(path, req, res).method('DELETE')\n}\napi.data = function tryGetData (context, promiseFnRun, _dataOld) {\n  if (typeof context === 'function' || context instanceof api.Promise) {\n    promiseFnRun = context\n    context = void 0\n  }\n  var promiseFnReload = void 0\n  var _this = this\n  var data = Object && Object.create ? Object.create(null) : {}\n  return new api.Promise(function tryGetDataRun (resolve, reject) {\n    var _promise\n    if ((typeof promiseFnRun) === 'function') {\n      _promise = promiseFnRun.call(_this, data, function (inputData) {\n        if (data && inputData && typeof inputData === 'object') {\n          Object.assign(data, inputData)\n        }\n      }, context)\n      promiseFnReload = promiseFnRun\n    } else if (promiseFnRun instanceof api.Promise) {\n      _promise = promiseFnRun\n    }\n    _this = promiseFnRun = void 0\n    // 必须是Promise实例化的对象\n    if (_promise instanceof api.Promise) {\n      _promise.then(function resData (res) {\n        // 如果没有return数据就返回一个data\n        res = res === void 0 ? data : res\n        data = void 0\n        return res\n      }).catch(function (e) {\n        // 如果请求出现了异常\n        return api.dataErrorEmit({context: context, error: e}).then(function (res) {\n          if (res && res.isReload === true) {\n            if (promiseFnReload) {\n              // 重新发送整个请求\n              return api.data(context, promiseFnReload, _dataOld)\n            } else {\n              throw new api.ApiError('Please resubmit or try again')\n            }\n          } else if (res && res.res !== void 0) {\n            // 返回指定结果\n            return res.res\n          }\n        })\n      }).then(resolve).catch(reject)\n    } else {\n      reject(new api.ApiError('Your argument must be a Promise, or a method, and this method returns Promise after the call'))\n    }\n    _promise = void 0\n  })\n}\napi._onDataServerErrorFn = null\napi.onDataServerError = function onDataServerError (fn) {\n  api._onDataServerErrorFn = fn\n}\napi._onDataClientErrorFn = null\napi.onDataClientError = function onDataClientError (fn) {\n  api._onDataClientErrorFn = fn\n}\napi.dataErrorEmit = function dataErrorEmit ({context, error}) {\n  var _promise = new api.Promise(function checkOnDataErrorArr (resolve, reject) {\n    reject(error)\n    resolve = reject = void 0\n  })\n  if (context && context.isServer) {\n  // 有上下文 并且是服务器端\n    if (typeof api._onDataServerErrorFn === 'function') {\n      _promise = _promise.catch(function onCatch (e) {\n        e = api._onDataServerErrorFn(e, context)\n        context = void 0\n        return e\n      })\n    }\n  } else {\n  // 否则统一客户端方法处理\n    if (typeof api._onDataClientErrorFn === 'function') {\n      _promise = _promise.catch(function onCatch (e) {\n        e = api._onDataClientErrorFn(e, context)\n        context = void 0\n        return e\n      })\n    }\n  }\n  return _promise\n}\n// 实例化构造函数\napi.Api = class DdvRestFulApi extends api.Promise {\n  // 构造函数\n  constructor (fn) {\n    // 调用父类构造函数\n    super(fn)\n    fn = void 0\n  }\n  headers (headers) {\n    this._headers = this._headers || Object.create(null)\n    Object.assign(this._headers, headers || Object.create(null))\n    return this\n  }\n  path (path) {\n    this._path = (path || '/').toString()\n    return this\n  }\n  method (method) {\n    this._method = (method || this._method || 'GET').toString().toUpperCase()\n    return this\n  }\n  sendData (data) {\n    this._data = this._data || Object.create(null)\n    Object.assign(this._data, data || Object.create(null))\n    return this\n  }\n  query (data) {\n    this._query = this._query || Object.create(null)\n    Object.assign(this._query, data || Object.create(null))\n    return this\n  }\n  req (req) {\n    this._req = req || this._req || null\n  }\n  res (res) {\n    this._res = res || this._res || null\n  }\n  context (context) {\n    if (context.req && context.res) {\n      this.req(context.req)\n      this.res(context.res)\n    } else if (context.requests && context.response) {\n      this.req(context.requests)\n      this.res(context.response)\n    }\n  }\n  _apiDestroy () {\n    api.nextTick.call(this, function () {\n      var key\n      for (key in this) {\n        if (!Object.hasOwnProperty.call(this, key)) continue\n        delete this[key]\n      }\n      key = void 0\n    })\n  }\n}\n// 发送别名\napi.Api.prototype.send = api.Api.prototype.sendData\n// 成功别名\napi.Api.prototype.success = api.Api.prototype.then\n// 错误别名\napi.Api.prototype.error = api.Api.prototype.catch\n// 失败别名\napi.Api.prototype.fail = api.Api.prototype.catch\n// 自定义错误类型\napi.ApiError = class ApiError extends Error {\n  // 构造函数\n  constructor (message, stack) {\n    // 调用父类构造函数\n    super(message)\n    message = message || 'Unknow Error'\n    this.name = this.name || 'Error'\n    this.type = this.type || 'ApiError'\n    this.error_id = this.error_id || 'UNKNOW_ERROR'\n    this.stack += stack ? ('\\n' + stack) : ''\n    message = stack = void 0\n  }\n}\n// 下一进程访问\napi.nextTick = function (fn) {\n  var _this = this\n  api.nextTickSys(function () {\n    if (typeof fn === 'function') {\n      fn.call(_this)\n    }\n    _this = fn = void 0\n  })\n  setTimeout(function () {\n    if (typeof fn === 'function') {\n      fn.call(_this)\n    }\n    _this = fn = void 0\n  }, 0)\n}\napi.nextTickQueue = []\napi.nextTickSys = (function () {\n  var fnc\n  if (typeof process !== 'undefined' && typeof process.nextTick === 'function') {\n    fnc = process.nextTick\n  } else {\n    'r webkitR mozR msR oR'.split(' ').forEach(function (prefixes) {\n      if (typeof fnc === 'function') {\n        return false\n      }\n      fnc = window[prefixes + 'equestAnimationFrame']\n    })\n    fnc = (fnc && fnc.bind && fnc.bind(window)) || window.setImmediate\n    if (typeof fnc !== 'function') {\n      if (typeof window === 'undefined' || window.ActiveXObject || !window.postMessage) {\n        fnc = function (f) {\n          setTimeout(f, 0)\n        }\n      } else {\n        window.addEventListener('message', function () {\n          var i = 0\n          while (i < api.nextTickQueue.length) {\n            try {\n              api.nextTickQueue[i++]()\n            } catch (e) {\n              api.nextTickQueue = api.nextTickQueue.slice(i)\n              window.postMessage('nextTick!', '*')\n              throw e\n            }\n          }\n          api.nextTickQueue.length = 0\n        }, true)\n        fnc = function (fn) {\n          if (!api.nextTickQueue.length) {\n            window.postMessage('nextTick!', '*')\n          }\n          api.nextTickQueue.push(fn)\n        }\n      }\n    }\n  }\n  return fnc\n}())\napi.util = function apiUtil (util) {\n  // 扩展请求接口\n  util.extend({\n    api,\n    get: api.get,\n    post: api.post,\n    put: api.put,\n    del: api.del\n  })\n  // delete兼容性问题\n  util['delete'] = api['delete']\n  util['Promise'] = api['Promise']\n}\nif (typeof window !== 'undefined' && window.window === window) {\n  window.ddvRestFulApi = api\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/api.js\n// module id = 0\n// module chunks = 0"],"sourceRoot":""}